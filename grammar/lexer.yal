{
use std::{env, fs::File, io::BufReader};
use ron::de::from_reader;
use syntax_analyzer::{lex::lex_analyzer::{LexAnalyzer, Symbol}, syn::syn_analyzer::SynAnalyzer, utility::read_config::fetch_config, view::print_table::{self, print_symbol_table}};
use std::fs;
}
(* 1. Var definition: *)
    (* Numbers *)

let digit = [0-9]                  
let integer = "-"?digit+
let float = "-"?(digit"."(digit*))

(* Words *)
let letter = ([a-z]|[A-Z])

(* Extra *)
let inlne_ws = (" "|"\t"|"\s")+
let break_ws = "\n"+
(* 2. Rules *)
rule gettoken =
    integer                           { return "INT"; }
    | "\""(letter)*"\""               { return "STRING"; }
    | float                           { return "FLOAT"; }
    | float("e"|"E")integer           { return "SCINOT"; }
    | "return"                        { return "RETURN"; }
    | "if"                            { return "IF"; }
    | "while"                            { return "WHILE"; }
    | "ignoreMe"                      { }
    | "\/\/"(letter|inlne_ws)*        { }
    | "="                             { return "ASSIGN"; }
    | "=="                            { return "EQUAL"; }
    | "\{"                             { return "LBRACKET"; }
    | "\}"                             { return "RBRACKET"; }
    | "\("                             { return "LPAREN"; }
    | "\)"                             { return "RPAREN"; }
    | ";"                             { return "SEMICOLON"; }
    | letter(letter|digit|"_")*       { return "ID"; }
    | (inlne_ws|break_ws)              { return "WS"; }